import{getLegacyInjectedProviders as e,getLegacyInjectedName as t}from"../connectors/get-legacy-injected-providers.mjs";import{isMetaMask as n}from"../connectors/is-wallet-installed.mjs";import{PrivyConnectorError as r}from"../errors.mjs";import{getJsonRpcEndpointFromChain as o}from"./eth/getPublicClient.mjs";import"ofetch";import"viem";const i=(e,t)=>{let n=[],r=[];for(let[o,i]of e.entries())o<t?n.push(i):r.push(i);return[n,r]},s=e=>!!String(e).toLowerCase().match(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/),a=(e,t)=>{let n=e.slice(0),r=[];for(;n.length;)r.push(n.splice(0,t));return r},l=(e,t=3,n=4,r="ethereum")=>{if(!e)return"";let o="ethereum"===r?2:0;return t+n+o+3>=e.length?e:`${e.slice(0,o+t)}...${e.slice(e.length-n,e.length)}`},u=(e,t=3,n=4)=>l(e,t,n,"solana"),c=e=>new Promise((t=>setTimeout(t,e)));function m(e,{interval:t=100,timeout:n=5e3}={}){return new Promise(((r,o)=>{let i,s=0,a=()=>{s>=n?o("Max attempts reached without result"):(i=e(),s+=t,null==i?setTimeout(a,t):r(i))};a()}))}const p=(e,t={})=>{let n=t.delayMs||150,r=t.maxAttempts||270;return new Promise((async(o,i)=>{let s=!1,a=0;for(;!s&&a<r;){if(t.abortSignal?.aborted)return;e().then((e=>{s=!0,o(e)}),((...e)=>{s=!0,i(...e)})),a+=1,await c(n)}s||i(Error("Exceeded max attempts before resolving function"))}))},f=(e,t,n={},r={})=>{let o=new URL(t,e);for(let[e,t]of Object.entries(n))void 0!==t&&o.searchParams.set(e,t);let i=Object.entries(r);if(i.length>0){let e=new URLSearchParams;for(let[t,n]of i)e.append(t,n);o.hash=e.toString()}return o.href},d=(e,t)=>e.toLowerCase()===t.toLowerCase(),h=(e,t)=>{for(let n of e)if(d(n,t))return!0;return!1},w=e=>e.replace(/([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g,""),g=e=>"string"==typeof e?e:"0x"+e.toString(16);async function y({store:r,walletList:o,externalWalletConfig:i,walletChainType:s,timeout:a=3e3}){let l=!1,u=window;return new Promise((c=>{function m(){if(l)return;l=!0,window.removeEventListener("ethereum#initialized",m);let a=r.getProviders();console.debug("Detected injected providers:",a.map((e=>e.info)));let u=[];for(let e of a)o.includes("coinbase_wallet")&&"com.coinbase.wallet"===e.info.rdns||"solana-only"===s&&"app.phantom"===e.info.rdns||u.push({type:e.info.name.toLowerCase().replace(/\s/g,"_"),eip6963InjectedProvider:e});if("solana-only"!==s)for(let r of e()){let e=t(r);if(!a.some((t=>t.info.name===e))){if(n(r,!0)&&!u.find((e=>"metamask"===e.type))){u.push({type:"metamask",legacyInjectedProvider:r});continue}if("Phantom"===e&&!u.find((e=>"phantom"===e.type))){u.push({type:"phantom",legacyInjectedProvider:r});continue}if("Coinbase Wallet"===e&&!u.find((e=>"coinbase_wallet"===e.type&&"smartWalletOnly"!==i.coinbaseWallet?.connectionOptions))){u.push({type:"coinbase_wallet",legacyInjectedProvider:r});continue}u.find((e=>"unknown_browser_extension"===e.type))||u.push({type:"unknown_browser_extension",legacyInjectedProvider:r})}}c(u)}u.ethereum?m():(window.addEventListener("ethereum#initialized",m,{once:!0}),setTimeout((()=>{m()}),a))}))}function b(e){return`eip155:${String(Number(e))}`}const v=e=>w(e).toLowerCase().replace(/[^a-zA-Z0-9 ]/g,"").replace(/\s/g,"_"),P=(e,t,n,i)=>{let s=Number(e),a=t.find((e=>e.id===s));if(!a)throw new r(`Unsupported chainId ${e}`,4901);return o(a,n,i)},D=(e,t)=>{let n=Number(e),o=t.find((e=>e.id===n));if(!o)throw new r(`Unsupported chainId ${e}`,4901);return o.blockExplorers?.default.url},j=e=>{let t={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},n=e.types.EIP712Domain??Object.entries(e.domain).map((([e,n])=>{if(null!=n&&"string"==typeof e&&e in t)return{name:e,type:t[e]}})).filter((e=>void 0!==e));return{...e,types:{...e.types,EIP712Domain:n}}};function F(e,{min:t,max:n}){return Math.min(Math.max(e,t),n)}export{F as clamp,f as constructURL,h as containsEthAddress,a as convert1dTo2dArray,y as detectInjectedConnectors,b as formatChainIdToCAIP2,u as formatSolanaWalletAddress,l as formatWalletAddress,j as generateTypedDataWithDomainType,D as getBlockExplorer,P as getJsonRpcEndpoint,p as invokeUntilSettled,v as normalizeWalletShortName,m as pollForResult,d as sameEthAddress,c as sleep,i as splitAtIndex,w as stripEmoji,g as toHex,s as validateEmail};

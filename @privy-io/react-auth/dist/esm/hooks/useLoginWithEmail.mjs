import{useCallback as t}from"react";import{PrivyErrorCode as r}from"../errors.mjs";import{useCaptcha as e,CaptchaError as o}from"./captcha-context.mjs";import{usePrivyInternal as i}from"./internal-context.mjs";import"ofetch";import"react/jsx-runtime";import"./index.mjs";import"../utils/index.mjs";import"../connectors/get-legacy-injected-providers.mjs";import"../connectors/is-wallet-installed.mjs";import"../utils/eth/getPublicClient.mjs";import"viem";const s=s=>{let a=e(),{emailOtpState:n,setEmailOtpState:l,initLoginWithEmail:c,loginWithCode:m}=i();return{sendCode:t((async({email:t,disableSignup:e})=>{try{let i;if(!t)throw Error("Email required to send OTP code");if(a.enabled&&"error"===a.status)throw new o(a.error,null,r.CAPTCHA_FAILURE);return a.enabled&&"success"!==a.status&&(a.execute(),i=await a.waitForResult()),await c({email:t,captchaToken:i,disableSignup:e,withPrivyUi:!1})}catch(t){throw l({status:"error",error:t}),s?.onError?.(t.privyErrorCode||r.UNKNOWN_AUTH_ERROR),t}}),[c]),loginWithCode:t((async({code:t})=>{try{if(a.enabled&&"error"===a.status)throw new o(a.error,null,r.CAPTCHA_FAILURE);let{user:e,isNewUser:i,wasAlreadyAuthenticated:n,linkedAccount:l}=await m(t);s?.onComplete?.({user:e,isNewUser:i,wasAlreadyAuthenticated:n,loginMethod:"email",loginAccount:l})}catch(t){throw l({status:"error",error:t}),s?.onError?.(t.privyErrorCode||r.UNKNOWN_AUTH_ERROR),t}}),[m,a.status]),state:n}};export{s as useLoginWithEmail};
